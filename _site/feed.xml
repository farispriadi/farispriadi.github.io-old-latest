<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-08-12T19:50:21+07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Programmer Biasa</title><subtitle>opini dan log seorang programmer.</subtitle><entry><title type="html">Menyembunyikan Grid pada Line Chart</title><link href="http://localhost:4000/dash-hide-grid-line-chart/" rel="alternate" type="text/html" title="Menyembunyikan Grid pada Line Chart" /><published>2022-08-12T00:00:00+07:00</published><updated>2022-08-12T00:00:00+07:00</updated><id>http://localhost:4000/dash-hide-grid-line-chart</id><content type="html" xml:base="http://localhost:4000/dash-hide-grid-line-chart/"><![CDATA[<p><code class="language-plaintext highlighter-rouge">gem install bundler</code> installs the bundler gem through RubyGems. You only need to install it once - not every time you create a new Jekyll project. Here are some additional details:</p>

<p><code class="language-plaintext highlighter-rouge">bundler</code> is a gem that manages other Ruby gems. It makes sure your gems and gem versions are compatible, and that you have all necessary dependencies each gem requires.</p>

<p>The <code class="language-plaintext highlighter-rouge">Gemfile</code> and <code class="language-plaintext highlighter-rouge">Gemfile.lock</code> files inform <code class="language-plaintext highlighter-rouge">Bundler</code> about the gem requirements in your site. If your site doesn’t have these Gemfiles, you can omit <code class="language-plaintext highlighter-rouge">bundle exec</code> and just <code class="language-plaintext highlighter-rouge">run jekyll serve</code>.</p>

<p>When you run <code class="language-plaintext highlighter-rouge">bundle exec jekyll serve</code>, <code class="language-plaintext highlighter-rouge">Bundler</code> uses the gems and versions as specified in <code class="language-plaintext highlighter-rouge">Gemfile.lock</code> to ensure your Jekyll site builds with no compatibility or dependency conflicts.</p>

<p>For more information about how to use <code class="language-plaintext highlighter-rouge">Bundler</code> in your Jekyll project, this tutorial should provide answers to the most common questions and explain how to get up and running quickly.</p>]]></content><author><name>faris</name></author><category term="dash" /><category term="plotly" /><category term="line chart" /><category term="tutorial" /><summary type="html"><![CDATA[gem install bundler installs the bundler gem through RubyGems. You only need to install it once - not every time you create a new Jekyll project. Here are some additional details:]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/2.jpg" /><media:content medium="image" url="http://localhost:4000/assets/images/2.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Membuat cell pada Dash Data Table dapat diedit</title><link href="http://localhost:4000/dash-editable-table/" rel="alternate" type="text/html" title="Membuat cell pada Dash Data Table dapat diedit" /><published>2022-08-11T00:00:00+07:00</published><updated>2022-08-11T00:00:00+07:00</updated><id>http://localhost:4000/dash-editable-table</id><content type="html" xml:base="http://localhost:4000/dash-editable-table/"><![CDATA[<p>Tabel biasanya digunakan untuk menampilkan data yang mempunyai baris dan kolom. Tabel juga terkadang dibuat tidak hanya untuk menampilkan data namun untuk mengisi data. Kali ini kita akan membuat tabel yang nilainya dapat Anda ubah atau dapat diupdate.</p>

<h2 id="membuat-table">Membuat Table</h2>

<p>Sebagai awalan akan menggunakan kode dari postingan <a href="https://farispriadi.github.io/dash-data-table/">Membuat Table dengan Dash Plotly</a>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import dash
from dash import dash_table
from dash import html
import pandas as pd

app = dash.Dash(__name__)

df = pd.DataFrame("http://data.bandung.go.id/dataset/fb75420f-05b5-4f50-997a-b2097a932270/resource/37bbbf28-0bec-4103-b3d2-dd148d368efa/download/data-laporan-iklim-1976-2017.csv")

app.layout = html.Div([
				html.Div([
					# Div untuk judul
					html.H2("Tabel Sederhana Dash Plotly")
				]),
				html.Div([
					# Div untuk table
					dash_table.DataTable(df.to_dict('records'), [ {'name': i, 'id': i} for i in df.columns])
				]),
			])

if __name__ == "__main__":
	app.run_server()

</code></pre></div></div>

<h2 id="menambahkan-fitur-pengurutan-sorting">Menambahkan Fitur Pengurutan (Sorting)</h2>

<p>Kode diatas hanya akan menampilkan tabel dengan data namun kita tidak bisa menperbaharui data yang tertera pada setiap <em>cell</em>. Kita akan menambahkan <em>keyword argument</em> yaitu <em>data</em> pada <em>df.to_dict(‘records’)</em> dan <em>columns</em> pada [ {‘name’: i, ‘id’: i} for i in df.columns] . Kita perlu menambahkan <em>editable=True</em> pada saat instantiasi DataTable agar fitur untuk mengedit cell dapat aktif. Sehingga kode akan menjadi sebagai berikut.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import dash
from dash import dash_table
from dash import html
import pandas as pd

app = dash.Dash(__name__)

df = pd.read_csv("http://data.bandung.go.id/dataset/fb75420f-05b5-4f50-997a-b2097a932270/resource/37bbbf28-0bec-4103-b3d2-dd148d368efa/download/data-laporan-iklim-1976-2017.csv")

app.layout = html.Div([
				html.Div([
					# Div untuk judul
					html.H2("Tabel Dengan  Dash Plotly")
				]),
				html.Div([
					# Div untuk table
					dash_table.DataTable(
						data = df.to_dict('records'), 
						columns=[ {'name': i, 'id': i} for i in df.columns],
						editable=True,
					)
				]),
			])

if __name__ == "__main__":
	app.run_server()

</code></pre></div></div>
<p>Pada saat kode ini dijalankan kita dapat mengubah nilai dari setiap <em>cell</em> yang sudah terisi nilai termasuk mengosongkannya.</p>

<h2 id="menjalankan-kode">Menjalankan Kode</h2>

<p>Kita dapat menjalankan kode dengan menyimpannya terlebih dahulu (misalkan dengan nama file <em>editable_table.py</em>) lalu kita jalankan dengan perintah.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ python editable_table.py
Dash is running on http://127.0.0.1:8050/

 * Serving Flask app 'test' (lazy loading)
 * Environment: production
   WARNING: This is a development server. Do not use it in a production deployment.
   Use a production WSGI server instead.
 * Debug mode: off
 * Running on http://127.0.0.1:8050 (Press CTRL+C to quit)
</code></pre></div></div>

<p>Anda bisa buka browser dan arahkan ke url <em>http://127.0.0.1:8050</em>.</p>]]></content><author><name>faris</name></author><category term="dash" /><category term="plotly" /><category term="table" /><category term="tutorial" /><summary type="html"><![CDATA[Tabel biasanya digunakan untuk menampilkan data yang mempunyai baris dan kolom. Tabel juga terkadang dibuat tidak hanya untuk menampilkan data namun untuk mengisi data. Kali ini kita akan membuat tabel yang nilainya dapat Anda ubah atau dapat diupdate.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://images.pexels.com/photos/164686/pexels-photo-164686.jpeg" /><media:content medium="image" url="https://images.pexels.com/photos/164686/pexels-photo-164686.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Mem-filter nilai dalam sebuah kolom pada Dash Data Table</title><link href="http://localhost:4000/dash-filterable-table/" rel="alternate" type="text/html" title="Mem-filter nilai dalam sebuah kolom pada Dash Data Table" /><published>2022-08-10T00:00:00+07:00</published><updated>2022-08-10T00:00:00+07:00</updated><id>http://localhost:4000/dash-filterable-table</id><content type="html" xml:base="http://localhost:4000/dash-filterable-table/"><![CDATA[<p>Ketika menemui tabel ada kalanya kita ingin dengan cepat menemukan sebuah nilai yang kita cari dengan cepat. Maka dari itu kita memerlukan fitur filter dalama tabel. Kali ini kita akan menambahkan fitur filter pada Dash Data Table.</p>

<h2 id="membuat-table">Membuat Table</h2>

<p>Dengan Dash Datatable memungkinkan sebuah kolom dari sebuah tabel dapat diurutkan. Untuk membuat sebuah tabel dapat difilter kita akan memerlukan parameter <em># filter_action=’native’</em> pada saat membuat objek DataTable. Selanjutnya kita akan mengimplementasikannya dengan menggunakan kode dari <a href="https://farispriadi.github.io/dash-data-table/">Membuat Table dengan Dash Plotly</a></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import dash
from dash import dash_table
from dash import html
import pandas as pd

app = dash.Dash(__name__)

df = pd.DataFrame("http://data.bandung.go.id/dataset/fb75420f-05b5-4f50-997a-b2097a932270/resource/37bbbf28-0bec-4103-b3d2-dd148d368efa/download/data-laporan-iklim-1976-2017.csv")

app.layout = html.Div([
				html.Div([
					# Div untuk judul
					html.H2("Tabel Sederhana Dash Plotly")
				]),
				html.Div([
					# Div untuk table
					dash_table.DataTable(df.to_dict('records'), [ {'name': i, 'id': i} for i in df.columns])
				]),
			])

if __name__ == "__main__":
	app.run_server()

</code></pre></div></div>

<h2 id="menambahkan-fitur-filter">Menambahkan Fitur Filter</h2>

<p>Pada kode diatas kita tambahkan <em>keyword argument</em> untuk <em>data</em> dan <em>columns</em>.Kita perlu menambahkan <em>filter_action=’native’</em> untuk mengaktifkan fitur filter pada tiap kolom dalam tabel, sehingga kode akan menjadi sebagai berikut.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import dash
from dash import dash_table
from dash import html
import pandas as pd

app = dash.Dash(__name__)

df = pd.read_csv("http://data.bandung.go.id/dataset/fb75420f-05b5-4f50-997a-b2097a932270/resource/37bbbf28-0bec-4103-b3d2-dd148d368efa/download/data-laporan-iklim-1976-2017.csv")

app.layout = html.Div([
				html.Div([
					# Div untuk judul
					html.H2("Tabel Dengan  Dash Plotly")
				]),
				html.Div([
					# Div untuk table
					dash_table.DataTable(
						data = df.to_dict('records'), 
						columns=[ {'name': i, 'id': i} for i in df.columns],
						filter_action='native',
					)
				]),
			])

if __name__ == "__main__":
	app.run_server()

</code></pre></div></div>

<p>Dengan menambahkan <em>sorting</em> pada laman  <a href="https://farispriadi.github.io/dash-sortable-table/">Mengurutkan Nilai pada Dash Data Table</a>, kita akan dapat mempunyai fitur filter dan sorting.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import dash
from dash import dash_table
from dash import html
import pandas as pd

app = dash.Dash(__name__)

df = pd.read_csv("http://data.bandung.go.id/dataset/fb75420f-05b5-4f50-997a-b2097a932270/resource/37bbbf28-0bec-4103-b3d2-dd148d368efa/download/data-laporan-iklim-1976-2017.csv")

app.layout = html.Div([
				html.Div([
					# Div untuk judul
					html.H2("Tabel Dengan  Dash Plotly")
				]),
				html.Div([
					# Div untuk table
					dash_table.DataTable(
						data = df.to_dict('records'), 
						columns=[ {'name': i, 'id': i} for i in df.columns],
						filter_action='native',
						sort_action='native',
						sort_mode='multi',
					)
				]),
			])

if __name__ == "__main__":
	app.run_server()

</code></pre></div></div>

<h2 id="menjalankan-kode">Menjalankan Kode</h2>

<p>Kita dapat menjalankan kode dengan menyimpannya terlebih dahulu (misalkan dengan nama file <em>filterable_table.py</em>) lalu kita jalankan dengan perintah.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ python filterable_table.py
Dash is running on http://127.0.0.1:8050/

 * Serving Flask app 'test' (lazy loading)
 * Environment: production
   WARNING: This is a development server. Do not use it in a production deployment.
   Use a production WSGI server instead.
 * Debug mode: off
 * Running on http://127.0.0.1:8050 (Press CTRL+C to quit)
</code></pre></div></div>

<p>Anda bisa buka browser dan arahkan ke url <em>http://127.0.0.1:8050</em>.</p>

<p><img src="/assets/images/simple_table_filter.png" alt="Tampilan" /></p>]]></content><author><name>faris</name></author><category term="dash" /><category term="plotly" /><category term="table" /><category term="tutorial" /><summary type="html"><![CDATA[Ketika menemui tabel ada kalanya kita ingin dengan cepat menemukan sebuah nilai yang kita cari dengan cepat. Maka dari itu kita memerlukan fitur filter dalama tabel. Kali ini kita akan menambahkan fitur filter pada Dash Data Table.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://images.pexels.com/photos/164686/pexels-photo-164686.jpeg" /><media:content medium="image" url="https://images.pexels.com/photos/164686/pexels-photo-164686.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Mengurutkan Nilai pada Dash Data Table</title><link href="http://localhost:4000/dash-sortable-table/" rel="alternate" type="text/html" title="Mengurutkan Nilai pada Dash Data Table" /><published>2022-08-09T00:00:00+07:00</published><updated>2022-08-09T00:00:00+07:00</updated><id>http://localhost:4000/dash-sortable-table</id><content type="html" xml:base="http://localhost:4000/dash-sortable-table/"><![CDATA[<p>Kita sering menemukan tabel dan dalam membaca tabel tentu saja mau tidak mau kita akan mulai dari kiri atas menuju ke kanan atas untuk membaca semua kolom, kemudian secara zigzag pindah ke kiri di bawah menuju kanan bawah. Namun Setelah kita menemukan kolom yang kita lebih berikan perhatian, kita cenderung membaca dari atas ke bawah. Untuk memudahkan dalam pembacaan data, akan lebih mudah kiranya jika kita dapat mengurutkan sebuah kolom baik urut secara <em>ascending</em> maupun <em>descending</em>.</p>

<h2 id="membuat-table">Membuat Table</h2>

<p>Dengan Dash Datatable memungkinkan sebuah kolom dari sebuah table dapat diurutkan. Untuk membuat sebuah tabel dapat diurutkan kita akan memerlukan parameter <em>sort_action=’native’</em> pada saat membuat objek DataTable. Kita akan menggunakan kode dari <a href="https://farispriadi.github.io/dash-data-table/">Membuat Table dengan Dash Plotly</a></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import dash
from dash import dash_table
from dash import html
import pandas as pd

app = dash.Dash(__name__)

df = pd.DataFrame("http://data.bandung.go.id/dataset/fb75420f-05b5-4f50-997a-b2097a932270/resource/37bbbf28-0bec-4103-b3d2-dd148d368efa/download/data-laporan-iklim-1976-2017.csv")

app.layout = html.Div([
				html.Div([
					# Div untuk judul
					html.H2("Tabel Sederhana Dash Plotly")
				]),
				html.Div([
					# Div untuk table
					dash_table.DataTable(df.to_dict('records'), [ {'name': i, 'id': i} for i in df.columns])
				]),
			])

if __name__ == "__main__":
	app.run_server()

</code></pre></div></div>

<h2 id="menambahkan-fitur-pengurutan-sorting">Menambahkan Fitur Pengurutan (Sorting)</h2>

<p>Kita perlu menambahkan <em>sort_action=’native’</em> pada saat instantiasi DataTable, sehingga kode akan menjadi sebagai berikut. selain itu kita akan menambahkan <em>keyword argument</em> yaitu <em>data</em> dan <em>columns</em>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import dash
from dash import dash_table
from dash import html
import pandas as pd

app = dash.Dash(__name__)

df = pd.read_csv("http://data.bandung.go.id/dataset/fb75420f-05b5-4f50-997a-b2097a932270/resource/37bbbf28-0bec-4103-b3d2-dd148d368efa/download/data-laporan-iklim-1976-2017.csv")

app.layout = html.Div([
				html.Div([
					# Div untuk judul
					html.H2("Tabel Dengan  Dash Plotly")
				]),
				html.Div([
					# Div untuk table
					dash_table.DataTable(
						data = df.to_dict('records'), 
						columns=[ {'name': i, 'id': i} for i in df.columns],
						sort_action='native',
					)
				]),
			])

if __name__ == "__main__":
	app.run_server()

</code></pre></div></div>
<p>Dari kode di atas kita sudah bisa melakukan pengurutan pada sebuah tabel. Namun jika kita memerlukan fitur agar pengurutan bisa dilakukan pada multi kolom, perlu ada tambahan argumen lagi yaitu <em>sort_mode=’multi’</em>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import dash
from dash import dash_table
from dash import html
import pandas as pd

app = dash.Dash(__name__)

df = pd.read_csv("http://data.bandung.go.id/dataset/fb75420f-05b5-4f50-997a-b2097a932270/resource/37bbbf28-0bec-4103-b3d2-dd148d368efa/download/data-laporan-iklim-1976-2017.csv")

app.layout = html.Div([
				html.Div([
					# Div untuk judul
					html.H2("Tabel Dengan  Dash Plotly")
				]),
				html.Div([
					# Div untuk table
					dash_table.DataTable(
						data = df.to_dict('records'), 
						columns=[ {'name': i, 'id': i} for i in df.columns],
						sort_action='native',
						sort_mode='multi',
					)
				]),
			])

if __name__ == "__main__":
	app.run_server()

</code></pre></div></div>

<p>Dengan menambahkan fitur <em>sort_mode=’multi’</em> memungkinkan tabel dapat diurutkan berdasarkan 2 atau lebih kolom.</p>

<h2 id="menjalankan-kode">Menjalankan Kode</h2>

<p>Kita dapat menjalankan kode dengan menyimpannya terlebih dahulu (misalkan dengan nama file <em>sortable_table.py</em>) lalu kita jalankan dengan perintah.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ python sortable_table.py
Dash is running on http://127.0.0.1:8050/

 * Serving Flask app 'test' (lazy loading)
 * Environment: production
   WARNING: This is a development server. Do not use it in a production deployment.
   Use a production WSGI server instead.
 * Debug mode: off
 * Running on http://127.0.0.1:8050 (Press CTRL+C to quit)
</code></pre></div></div>

<p>Anda bisa buka browser dan arahkan ke url <em>http://127.0.0.1:8050</em>.</p>]]></content><author><name>faris</name></author><category term="dash" /><category term="plotly" /><category term="table" /><category term="tutorial" /><summary type="html"><![CDATA[Kita sering menemukan tabel dan dalam membaca tabel tentu saja mau tidak mau kita akan mulai dari kiri atas menuju ke kanan atas untuk membaca semua kolom, kemudian secara zigzag pindah ke kiri di bawah menuju kanan bawah. Namun Setelah kita menemukan kolom yang kita lebih berikan perhatian, kita cenderung membaca dari atas ke bawah. Untuk memudahkan dalam pembacaan data, akan lebih mudah kiranya jika kita dapat mengurutkan sebuah kolom baik urut secara ascending maupun descending.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://images.pexels.com/photos/164686/pexels-photo-164686.jpeg" /><media:content medium="image" url="https://images.pexels.com/photos/164686/pexels-photo-164686.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Membuat Bar Chart dengan Dash Plotly.</title><link href="http://localhost:4000/dash-simple-bar-chart/" rel="alternate" type="text/html" title="Membuat Bar Chart dengan Dash Plotly." /><published>2022-08-08T00:00:00+07:00</published><updated>2022-08-08T00:00:00+07:00</updated><id>http://localhost:4000/dash-simple-bar-chart</id><content type="html" xml:base="http://localhost:4000/dash-simple-bar-chart/"><![CDATA[<p>Bar chart atau diagram batang digunakan untuk menampilkan data yang berkategori. Dengan menggunakan Dash Plotly kita bisa dengan mudah membuat Bar Chart. Berbeda denga Line Chart, untuk membuat Bar Chart, kita akan membutuhkan <em>plotly graph objects</em>.</p>

<h2 id="import-modul-yang-diperlukan">Import modul yang diperlukan</h2>

<p>Untuk membuat bar chart sederhana, kita memerlukan beberapa modul dalam dash plotly.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import dash
from dash import html
from dash import dcc
from plotly import graph_objects as go


</code></pre></div></div>

<p><em>import dash</em> digunakan untuk mengimpor modul dash. <em>from dash import html</em> digunakan untuk mengimpor html dash atau <em>dash html components</em>, komponen ini memungkinkan kita memasukkan komponen HTML dengan menggunakan sintaks python. <em>from dash import dcc</em> digunakan untuk mengimpor komponen core dari dash atau <em>dash core components</em> yang digunakan untuk memasukkan komponen interaktif termasuk membuat grafik. Untuk bar chart kita memerlukan <em>plotly graph object</em> karena dalam <em>dcc.Graph</em> hanya menyediakan Line Chart dan Scatter Plot.</p>

<h2 id="membuat-layout">Membuat Layout</h2>

<p>Selanjutnya kita akan membuat layout atau tata letak.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import dash
...


from plotly import graph_objects as go

app = dash.Dash(__name__)

app.layout = html.Div([
				# Div utama
				html.Div([
					# Div untuk Judul
				]),
				html.Div([
					# Div untuk Bar Chart
				]),
			])

</code></pre></div></div>

<p><em>app = dash.Dash(__name__)</em> kode ini adalah langkah awal kita untuk membuat objek dash yang disimpan dalam variable <em>app</em>. Selanjutnya <em>app.layout</em>, kita akan meng-assign atau memasukkan layout kita ke dalam atribut layout yang berada di dalam <em>app</em>. Layout tersebut akan kita buat dengan satu <em>Div</em> utama dan di dalamnya terdapat dua <em>Div</em> anakan. Dimana <em>Div</em> pertama untuk meletakkan judul dan <em>Div</em> kedua untuk meletakkan grafik. Tanda <em>#</em> merupakan <em>comment</em> yang digunakan sebagai keterangan saja.</p>

<h2 id="menuliskan-konten">Menuliskan konten</h2>

<p>Selanjutnya kita akan menambahkan judul dan grafiknya</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import dash
...

app = dash.Dash(__name__)

app.layout = html.Div([
				# Div utama
				html.Div([
					# Div untuk Judul
					html.H2("Bar Chart Sederhana dengan Dash Plotly")
				]),
				html.Div([
					# Div untuk Bar Chart
					dcc.Graph( figure =
						go.Figure(
							go.Bar(x=['Jawa Barat','Jawa Tengah','Jawa Timur'], y=[27,35,38])
						)


					)
				]),
			])
</code></pre></div></div>

<p><em>html.H2</em> kode ini digunakan untuk membuat layaknya heading H2 pada HTML. Komponen H2 ini ada dalam modul html. Untuk menampilkan grafik kita memerlukan objek <em>Graph</em> yang berada pada modul <em>dcc</em>. Pada kode di atas kita akan membuat bar chart sederhana . <em>figure</em> pada kelas Graph diisi dengan objek Figure dari <em>graph_objects</em>, dan argumen untuk kontruktor dari <em>go.Figure</em> diisi dengan <em>go.Bar</em> untuk secara spesifik membuat bar chart. Nilai <em>x</em> dan <em>y</em> axis disi dengan sebuah list yang mempunyai panjang yang sama. Misalkan x adalah <em>list</em> nama provinsi dan y adalah <em>list</em> jumlah kabupaten dan kota dalam provnsi tersebut.</p>

<h2 id="menjalankan-kode">Menjalankan Kode</h2>

<p>Dengan demikian kode secara keseluruhan adalah sebagai berikut:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import dash
from dash import html
from dash import dcc
from plotly import graph_objects as go

app = dash.Dash(__name__)

app.layout = html.Div([
				# Div utama
				html.Div([
					# Div untuk Judul
					html.H2("Bar Chart Sederhana dengan Dash Plotly")
				]),
				html.Div([
					# Div untuk Bar Chart
					dcc.Graph( figure =
						go.Figure(
							go.Bar(x=['Jawa Barat','Jawa Tengah','Jawa Timur'], y=[27,35,38])
						)


					)
				]),
			])

if __name__ == '__main__':
	app.run_server()

</code></pre></div></div>

<p><em>app.run_server()</em> kode ini ditambahkan ke dalam main agar server Dash dapat berjalan. File ini akan disimpan dengan nama <em>simple_bar_chart.py</em>, Anda dapat mengganti nama sesuai dengan yang diinginkan.</p>

<p>Seperti kode python lainnya, untuk menjalankannya kode ini, bisa menggunakan IDE seperti PyCharm atau run di CMD  jika di windows atau Terminal jika di distibusi Linux Ubuntu. Jika menggunakan terminal maka cara menjalankan kode dari Linux Ubuntu.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ python simple_bar_chart.py
Dash is running on http://127.0.0.1:8050/

 * Serving Flask app 'test' (lazy loading)
 * Environment: production
   WARNING: This is a development server. Do not use it in a production deployment.
   Use a production WSGI server instead.
 * Debug mode: off
 * Running on http://127.0.0.1:8050 (Press CTRL+C to quit)
</code></pre></div></div>

<p>Sekarang anda dapat membuka browser dan mengakses aplikasi dash dengan alamat url <em>http://127.0.0.1:8050</em> 
<img src="/assets/images/simple_bar_chart.png" alt="Tampilan" /></p>]]></content><author><name>faris</name></author><category term="dash" /><category term="plotly" /><category term="bar chart" /><category term="tutorial" /><category term="featured" /><summary type="html"><![CDATA[Bar chart atau diagram batang digunakan untuk menampilkan data yang berkategori. Dengan menggunakan Dash Plotly kita bisa dengan mudah membuat Bar Chart. Berbeda denga Line Chart, untuk membuat Bar Chart, kita akan membutuhkan plotly graph objects.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://images.pexels.com/photos/590020/pexels-photo-590020.jpeg" /><media:content medium="image" url="https://images.pexels.com/photos/590020/pexels-photo-590020.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Membuat Table dengan Dash Plotly</title><link href="http://localhost:4000/dash-data-table/" rel="alternate" type="text/html" title="Membuat Table dengan Dash Plotly" /><published>2022-08-07T00:00:00+07:00</published><updated>2022-08-07T00:00:00+07:00</updated><id>http://localhost:4000/dash-data-table</id><content type="html" xml:base="http://localhost:4000/dash-data-table/"><![CDATA[<p>Tabel digunakan untuk menampilkan data dalam bentuk baris dan kolom. Tabel lebih mudah digunakan untuk menyajikan komparasi data yang mempunyai perbedaan unit. Dengan menggunakan Dash Datatable kita akan membuat tampilan tabel sederhana.</p>

<h2 id="import-modul-yang-diperlukan">Import modul yang diperlukan</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import dash
from dash import dash_table
from dash import html
import pandas as pd


</code></pre></div></div>

<p><em>import dash</em> digunakan untuk mengimpor modul dash. untuk membuat table kita perlu mengimpor <em>dash_table</em> dari modul <em>dash</em>. <em>from dash import html</em> digunakan untuk mengimpor html dash atau <em>dash html components</em>, komponen ini memungkinkan kita memasukkan komponen HTML dengan menggunakan sintaks python. Kita perlu membuat dataframe dengan membaca sebuah csv file dari url, sehingga untuk mebgimpor pandas kita perlu menuliskan <em>import pandas as pd</em>.</p>

<h2 id="membuat-layout">Membuat Layout</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import dash
from dash import dash_table
from dash import html
import pandas as pd

app = dash.Dash(__name__)

app.layout = html.Div([
				html.Div([
					# Div untuk judul
				]),
				html.Div([
					# Div untuk table
				]),
			])


</code></pre></div></div>
<p><em>app = dash.Dash(__name__)</em> kode ini adalah langkah awal kita untuk membuat objek dash yang disimpan dalam variable <em>app</em>. Selanjutnya <em>app.layout</em>, kita akan meng-assign atau memasukkan layout kita ke dalam atribut layout yang berada di dalam <em>app</em>. Layout tersebut akan kita buat dengan satu <em>Div</em> utama dan di dalamnya terdapat dua <em>Div</em> anakan. Dimana <em>Div</em> pertama untuk meletakkan judul dan <em>Div</em> kedua untuk meletakkan tabel. Tanda <em>#</em> merupakan <em>comment</em> yang digunakan sebagai keterangan saja.</p>

<h2 id="menuliskan-konten">Menuliskan konten</h2>

<p>Disini kita akan mengisi bagian Div yang sudah kita buat sebelumnya dengan judul dan tabel.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import dash
from dash import dash_table
from dash import html
import pandas as pd

app = dash.Dash(__name__)

df = pd.read_csv("http://data.bandung.go.id/dataset/fb75420f-05b5-4f50-997a-b2097a932270/resource/37bbbf28-0bec-4103-b3d2-dd148d368efa/download/data-laporan-iklim-1976-2017.csv")

app.layout = html.Div([
				html.Div([
					# Div untuk judul
					html.H2("Tabel Sederhana Dash Plotly")
				]),
				html.Div([
					# Div untuk table
					dash_table.DataTable(df.to_dict('records'), [ {'name': i, 'id': i} for i in df.columns])
				]),
			])

if __name__ == "__main__":
	app.run_server()


</code></pre></div></div>

<p>Kita perlu membuat sebuah Dataframe yang disimpan dalam variable <em>df</em>. Dataframe tersebut dibuat dengan membaca file csv dari url yang kami ambil dari Bandung Open Data dengan judul <strong>Tahun 2017 - Data Laporan Iklim Kota Bandung</strong>. Untuk membuat judul dengan ukuran heading 2 perlu menggunakan kode <em>html.H2</em>. Sedangkan tabel dibuat dengan meninstantiasi objek dari <em>dash_table.DataTable</em>, dimana argumen pertama diisi dengan <em>dictionary</em> yang merupakan konversi dari Dataframe dan argumen kedua adalah nama sebuah <em>list of dictionary</em> untuk membuat label kolom tabel.</p>

<h2 id="menjalankan-kode">Menjalankan Kode</h2>

<p>Selanjutnya kita bisa simpan dengan nama <em>simple_table.py</em> , dan menjalankan kode diatas dengan perintah seperti di bawah ini.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ python simple_table.py

Dash is running on http://127.0.0.1:8050/

 * Serving Flask app 'test' (lazy loading)
 * Environment: production
   WARNING: This is a development server. Do not use it in a production deployment.
   Use a production WSGI server instead.
 * Debug mode: off
 * Running on http://127.0.0.1:8050 (Press CTRL+C to quit)
</code></pre></div></div>

<p>Sekarang anda dapat membuka browser dan mengakses aplikasi dash dengan alamat url <em>http://127.0.0.1:8050</em></p>

<p><img src="/assets/images/simple_table.png" alt="Tampilan" /></p>]]></content><author><name>faris</name></author><category term="dash" /><category term="plotly" /><category term="table" /><category term="tutorial" /><category term="featured" /><summary type="html"><![CDATA[Tabel digunakan untuk menampilkan data dalam bentuk baris dan kolom. Tabel lebih mudah digunakan untuk menyajikan komparasi data yang mempunyai perbedaan unit. Dengan menggunakan Dash Datatable kita akan membuat tampilan tabel sederhana.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://images.pexels.com/photos/164686/pexels-photo-164686.jpeg" /><media:content medium="image" url="https://images.pexels.com/photos/164686/pexels-photo-164686.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Membuat Line Chart dengan Dash Plotly.</title><link href="http://localhost:4000/dash-simple-line-chart/" rel="alternate" type="text/html" title="Membuat Line Chart dengan Dash Plotly." /><published>2022-08-06T00:00:00+07:00</published><updated>2022-08-06T00:00:00+07:00</updated><id>http://localhost:4000/dash-simple-line-chart</id><content type="html" xml:base="http://localhost:4000/dash-simple-line-chart/"><![CDATA[<p>Line chart atau diagram garis digunakan untuk menampilkan tren data yang kontinyu, misalkan time series data. Dengan menggunakan Dash Plotly kita bisa dengan mudah membuat Line Chart.</p>

<h2 id="import-modul-yang-diperlukan">Import modul yang diperlukan</h2>

<p>Untuk membuat line chart sederhana, kita memerlukan beberapa modul dalam dash plotly.</p>

<div class="code-header">
  <button class="copy-code-button">
    Copy
  </button>
</div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import dash
from dash import html
from dash import dcc
</code></pre></div></div>

<p><em>import dash</em> digunakan untuk mengimpor modul dash. <em>from dash import html</em> digunakan untuk mengimpor html dash atau <em>dash html components</em>, komponen ini memungkinkan kita memasukkan komponen HTML dengan menggunakan sintaks python. <em>from dash import dcc</em> digunakan untuk mengimpor komponen core dari dash atau <em>dash core components</em> yang digunakan untuk memasukkan komponen interaktif termasuk membuat grafik.</p>

<h2 id="membuat-layout">Membuat Layout</h2>

<p>Selanjutnya kita akan membuat layout atau tata letak.</p>

<div class="code-header">
  <button class="copy-code-button">
    Copy
  </button>
</div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import dash
...

app = dash.Dash(__name__)

app.layout = html.Div([
				# Div utama
				html.Div([
					# Div untuk Judul
				]),
				html.Div([
					# Div untuk Line Chart
				]),
			])

</code></pre></div></div>

<p><em>app = dash.Dash(__name__)</em> kode ini adalah langkah awal kita untuk membuat objek dash yang disimpan dalam variable <em>app</em>. Selanjutnya <em>app.layout</em>, kita akan meng-assign atau memasukkan layout kita ke dalam atribut layout yang berada di dalam <em>app</em>. Layout tersebut akan kita buat dengan satu <em>Div</em> utama dan di dalamnya terdapat dua <em>Div</em> anakan. Dimana <em>Div</em> pertama untuk meletakkan judul dan <em>Div</em> kedua untuk meletakkan grafik. Tanda <em>#</em> merupakan <em>comment</em> yang digunakan sebagai keterangan saja.</p>

<h2 id="menuliskan-konten">Menuliskan konten</h2>

<p>Selanjutnya kita akan menambahkan judul dan grafiknya</p>

<div class="code-header">
  <button class="copy-code-button">
    Copy
  </button>
</div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import dash
...

app = dash.Dash(__name__)

app.layout = html.Div([
				# Div utama
				html.Div([
					# Div untuk Judul
					html.H2("Line Chart Sederhana dengan Dash Plotly")
				]),
				html.Div([
					# Div untuk Line Chart
					dcc.Graph( figure =
						{
							'data' : [{
								'x' : [1,2,3,4,5,6,7,8,9],
								'y' : [1,4,9,16,25,36,49,64,81],
								'mode': 'lines',

							}],
							'layout' : {
								'title' : 'Pangkat Kuadrat',
							}
						}


					)
				]),
			])
</code></pre></div></div>

<p><em>html.H2</em> kode ini digunakan untuk membuat layaknya heading H2 pada HTML. Komponen H2 ini ada dalam modul html. Untuk menampilkan grafik kita memerlukan objek <em>Graph</em> yang berada pada modul <em>dcc</em>. Pada kode di atas kita akan membuat line chart sederhana . <em>figure</em> pada kelas Graph  mempunyai nilai berupa <em>dict</em>, dimana dictionary tersebut berisi <em>key</em> data  untuk mengisi data set dan <em>key</em> layout untuk mengkonfigurasi tata letak grafik. Untuk membuat line chart pada <em>key</em> mode diisi dengan nilai <em>‘lines’</em>.</p>

<h2 id="menjalankan-kode">Menjalankan Kode</h2>

<p>Dengan demikian kode secara keseluruhan adalah sebagai berikut:</p>

<div class="code-header">
  <button class="copy-code-button">
    Copy
  </button>
</div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import dash
from dash import html
from dash import dcc

app = dash.Dash(__name__)

app.layout = html.Div([
				# Div utama
				html.Div([
					# Div untuk Judul
					html.H2("Line Chart Sederhana dengan Dash Plotly")
				]),
				html.Div([
					# Div untuk Line Chart
					dcc.Graph( figure =
						{
							'data' : [{
								'x' : [1,2,3,4,5,6,7,8,9],
								'y' : [1,4,9,16,25,36,49,64,81],
								'mode': 'lines',

							}],
							'layout' : {
								'title' : 'Pangkat Kuadrat',
							}
						}


					)
				]),
			])

if __name__ == '__main__':
	app.run_server()

</code></pre></div></div>

<p><em>app.run_server()</em> kode ini ditambahkan ke dalam main agar server Dash dapat berjalan. File ini akan disimpan dengan nama <em>simple_line_chart.py</em>, Anda dapat mengganti nama sesuai dengan yang diinginkan.</p>

<p>Seperti kode python lainnya, untuk menjalankannya kode ini, bisa menggunakan IDE seperti PyCharm atau run di CMD  jika di windows atau Terminal jika di distibusi Linux Ubuntu. Jika menggunakan terminal maka cara menjalankan kode dari Linux Ubuntu.</p>

<div class="code-header">
  <button class="copy-code-button">
    Copy
  </button>
</div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ python simple_line_chart.py
Dash is running on http://127.0.0.1:8050/

 * Serving Flask app 'test' (lazy loading)
 * Environment: production
   WARNING: This is a development server. Do not use it in a production deployment.
   Use a production WSGI server instead.
 * Debug mode: off
 * Running on http://127.0.0.1:8050 (Press CTRL+C to quit)
</code></pre></div></div>

<p>Sekarang anda dapat membuka browser dan mengakses aplikasi dash dengan alamat url <em>http://127.0.0.1:8050</em> 
<img src="/assets/images/simple_line_chart.png" alt="Tampilan" /></p>]]></content><author><name>faris</name></author><category term="dash" /><category term="plotly" /><category term="line chart" /><category term="tutorial" /><category term="featured" /><summary type="html"><![CDATA[Line chart atau diagram garis digunakan untuk menampilkan tren data yang kontinyu, misalkan time series data. Dengan menggunakan Dash Plotly kita bisa dengan mudah membuat Line Chart.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://images.pexels.com/photos/590011/pexels-photo-590011.jpeg" /><media:content medium="image" url="https://images.pexels.com/photos/590011/pexels-photo-590011.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Arus Teknologi Informasi di Desa</title><link href="http://localhost:4000/arus-teknologi-desa/" rel="alternate" type="text/html" title="Arus Teknologi Informasi di Desa" /><published>2022-01-16T00:00:00+07:00</published><updated>2022-01-16T00:00:00+07:00</updated><id>http://localhost:4000/arus-teknologi-desa</id><content type="html" xml:base="http://localhost:4000/arus-teknologi-desa/"><![CDATA[<p>Adanya internet menyebabkan arus informasi tidak bisa terbendung. Mau di kota ataupun pelosok desa semua bisa mengakses layanan gratis di internet, asalkan di desa tersebut sudah ada tower provider telekomunikasi.</p>

<p><em>Youtube</em> adalah platform <em>video sharing</em> gratis.</p>]]></content><author><name>faris</name></author><category term="opini" /><category term="teknologi" /><category term="featured" /><summary type="html"><![CDATA[Adanya internet menyebabkan arus informasi tidak bisa terbendung. Mau di kota ataupun pelosok desa semua bisa mengakses layanan gratis di internet, asalkan di desa tersebut sudah ada tower provider telekomunikasi.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/3.jpg" /><media:content medium="image" url="http://localhost:4000/assets/images/3.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Inovasi Desa</title><link href="http://localhost:4000/inovasi-desa/" rel="alternate" type="text/html" title="Inovasi Desa" /><published>2022-01-05T00:00:00+07:00</published><updated>2022-01-05T00:00:00+07:00</updated><id>http://localhost:4000/inovasi-desa</id><content type="html" xml:base="http://localhost:4000/inovasi-desa/"><![CDATA[<p>Penting kita sadari bahwa desa memegang peran krusial dari kecanggihan dan gemerlapnya kota besar. Desa adalah penyumbang berlian yang kini dinikmati kota besar. Penyumbang bahan makanan tersegar dan terbaik ya berasal dari desa. Namun hal yang aneh, hasil terbaik desa mereka jual ke kota besar, dengan harapan mendapat keuntungan yang besar, sedangkan mereka sendiri membutuhkan barang tersebut. Terkadang malahan orang desa bukannya menikmati bahan makanan terbaik yang mereka tanam, malah membeli produk impor serupa dari pemerintah yang mempunyai grade lebih rendah. Miris bukan ?.</p>

<h4 id="inovasi-dan-teknologi-di-desa">Inovasi dan Teknologi di Desa</h4>

<p>Isu mengenai penggunaan teknologi untuk melakukan inovasi di desa bukanlah barang baru. Mungkin malah sudah menjadi isu lama. Implementasinya sudah banyak, banyak pula yang berhasil. Namun terkadang inovasi dan pemanfaatan teknologi ini bukanlah untuk memakmurkan masyarakat desa itu, tapi memperkaya kota besar. Upsss..terlihat sinis sekali ya ..?</p>

<p>Dengan terbukanya informasi dan ilmu pengetahuan melalui internet, kita mulai disuguhkan kilau berlian yang ada di desa. Desa-desa mulai memperbaiki diri dan bervisi melakukan inovasi Dari-Oleh-Untuk Desa. Kita bisa <em>googling</em> atau cari di <em>youtube</em>, dimana orang-orang di desa bisa membuat helikopter, robotik bahkan hacking tanpa perlu mereka pergi ke kota. Kota besar perlu waspada.</p>

<p>Banyak desa yang berhasil dengan transformasi contohnya dengan BUMDes-nya. Ini kabar yang baik menurut saya. Bayangkan jika desa bisa mengelola sumber daya mereka sendiri dan menyajikannya dalam barang/jasa yang siap konsumsi, betapa akan kocar kacirnya kota besar. Mungkin perputaran uang tidak akan berada di kota lagi, tapi tersebar secara <em>distributed</em> di desa-desa sesuai dengan kemampuannya. Tentu saja keluarnya kebijakan mangenai undang-undang desa membantu <em>environment</em> desa dalam bertumbuh.</p>

<p>Menurut para ahli kemampuan desa dalam mengelola sumber daya secara maksimal akan semakin terasa manfaatnya jika bersinergi langsung dengan masyarakat desanya. Berfokus bukan pada keuntungan berupa uang, namun berfokus pada kemakmuran warganya. Sesuai dengan Undang-Undang 1945 pasal 33. Satu hal lagi yang akan mem-<em>booster</em> pengelolaan di desa adalah melakukan <em>link-and-math</em> dengan desa sekitar. Sehingga beberapa desa sekitar dapat saling bertukar keuntungan dan kemampuan terbaik mereka. Tentu saja setiap desa perlu menentukan dirinya sebagai <em>centra</em> atau pusat barang yang mempunyai <em>niche</em> pasar tertarget. Jika seperti ini sepertinya sulit menciptakan monopoli.</p>

<p>Ketahanan desa adalah pertahanan pertama sebuah negara. Karena dengan mandirinya desa-desa di Indonesia, tidak perlu ada lagi bansos dari pemerintah pusat. Desa dan warganya dapat menghidupi mereka sendiri, memakmurkan warga mereka sendiri. Dan yang jelas hasil terbaik desa akan dinikmati oleh warganya sendiri.</p>]]></content><author><name>faris</name></author><category term="opini" /><category term="desa" /><category term="sticky" /><summary type="html"><![CDATA[Penting kita sadari bahwa desa memegang peran krusial dari kecanggihan dan gemerlapnya kota besar. Desa adalah penyumbang berlian yang kini dinikmati kota besar. Penyumbang bahan makanan tersegar dan terbaik ya berasal dari desa. Namun hal yang aneh, hasil terbaik desa mereka jual ke kota besar, dengan harapan mendapat keuntungan yang besar, sedangkan mereka sendiri membutuhkan barang tersebut. Terkadang malahan orang desa bukannya menikmati bahan makanan terbaik yang mereka tanam, malah membeli produk impor serupa dari pemerintah yang mempunyai grade lebih rendah. Miris bukan ?.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/home.jpg" /><media:content medium="image" url="http://localhost:4000/assets/images/home.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>